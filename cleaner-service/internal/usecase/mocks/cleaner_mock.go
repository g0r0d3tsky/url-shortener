// Code generated by MockGen. DO NOT EDIT.
// Source: cleaner.go
//
// Generated by this command:
//
//	mockgen -source=cleaner.go -destination=mocks/cleaner_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "cleaner-service/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUrlRepo is a mock of UrlRepo interface.
type MockUrlRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepoMockRecorder
}

// MockUrlRepoMockRecorder is the mock recorder for MockUrlRepo.
type MockUrlRepoMockRecorder struct {
	mock *MockUrlRepo
}

// NewMockUrlRepo creates a new mock instance.
func NewMockUrlRepo(ctrl *gomock.Controller) *MockUrlRepo {
	mock := &MockUrlRepo{ctrl: ctrl}
	mock.recorder = &MockUrlRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepo) EXPECT() *MockUrlRepoMockRecorder {
	return m.recorder
}

// DeleteURL mocks base method.
func (m *MockUrlRepo) DeleteURL(ctx context.Context, url *domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockUrlRepoMockRecorder) DeleteURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockUrlRepo)(nil).DeleteURL), ctx, url)
}

// GetURL mocks base method.
func (m *MockUrlRepo) GetURL(ctx context.Context, monthAmount int) ([]*domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, monthAmount)
	ret0, _ := ret[0].([]*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockUrlRepoMockRecorder) GetURL(ctx, monthAmount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockUrlRepo)(nil).GetURL), ctx, monthAmount)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetURL mocks base method.
func (m *MockCache) GetURL(ctx context.Context, shortURL string) (*domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shortURL)
	ret0, _ := ret[0].(*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockCacheMockRecorder) GetURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockCache)(nil).GetURL), ctx, shortURL)
}

// MockKeyRepo is a mock of KeyRepo interface.
type MockKeyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRepoMockRecorder
}

// MockKeyRepoMockRecorder is the mock recorder for MockKeyRepo.
type MockKeyRepoMockRecorder struct {
	mock *MockKeyRepo
}

// NewMockKeyRepo creates a new mock instance.
func NewMockKeyRepo(ctrl *gomock.Controller) *MockKeyRepo {
	mock := &MockKeyRepo{ctrl: ctrl}
	mock.recorder = &MockKeyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRepo) EXPECT() *MockKeyRepoMockRecorder {
	return m.recorder
}

// UpdateKey mocks base method.
func (m *MockKeyRepo) UpdateKey(ctx context.Context, url *domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKey", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKey indicates an expected call of UpdateKey.
func (mr *MockKeyRepoMockRecorder) UpdateKey(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKey", reflect.TypeOf((*MockKeyRepo)(nil).UpdateKey), ctx, url)
}
