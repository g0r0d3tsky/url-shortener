// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=mocks/service_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	domain "storage-service/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckExist mocks base method.
func (m *MockRepository) CheckExist(ctx context.Context, url *domain.Url) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExist", ctx, url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExist indicates an expected call of CheckExist.
func (mr *MockRepositoryMockRecorder) CheckExist(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExist", reflect.TypeOf((*MockRepository)(nil).CheckExist), ctx, url)
}

// CreateShort mocks base method.
func (m *MockRepository) CreateShort(ctx context.Context, url *domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShort", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShort indicates an expected call of CreateShort.
func (mr *MockRepositoryMockRecorder) CreateShort(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShort", reflect.TypeOf((*MockRepository)(nil).CreateShort), ctx, url)
}

// UpdateURL mocks base method.
func (m *MockRepository) UpdateURL(ctx context.Context, url *domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateURL indicates an expected call of UpdateURL.
func (mr *MockRepositoryMockRecorder) UpdateURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateURL", reflect.TypeOf((*MockRepository)(nil).UpdateURL), ctx, url)
}
