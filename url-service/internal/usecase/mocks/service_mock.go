// Code generated by MockGen. DO NOT EDIT.
// Source: shortener_service.go
//
// Generated by this command:
//
//	mockgen -source=shortener_service.go -destination=mocks/service_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	domain "url-service/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockUrlRepo is a mock of UrlRepo interface.
type MockUrlRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRepoMockRecorder
}

// MockUrlRepoMockRecorder is the mock recorder for MockUrlRepo.
type MockUrlRepoMockRecorder struct {
	mock *MockUrlRepo
}

// NewMockUrlRepo creates a new mock instance.
func NewMockUrlRepo(ctrl *gomock.Controller) *MockUrlRepo {
	mock := &MockUrlRepo{ctrl: ctrl}
	mock.recorder = &MockUrlRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlRepo) EXPECT() *MockUrlRepoMockRecorder {
	return m.recorder
}

// GetURL mocks base method.
func (m *MockUrlRepo) GetURL(ctx context.Context, short string) (*domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, short)
	ret0, _ := ret[0].(*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockUrlRepoMockRecorder) GetURL(ctx, short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockUrlRepo)(nil).GetURL), ctx, short)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetURL mocks base method.
func (m *MockCache) GetURL(ctx context.Context, short string) (*domain.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, short)
	ret0, _ := ret[0].(*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockCacheMockRecorder) GetURL(ctx, short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockCache)(nil).GetURL), ctx, short)
}

// SetURL mocks base method.
func (m *MockCache) SetURL(ctx context.Context, url *domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetURL indicates an expected call of SetURL.
func (mr *MockCacheMockRecorder) SetURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetURL", reflect.TypeOf((*MockCache)(nil).SetURL), ctx, url)
}

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockBroker) Push(topic string, message *domain.Url) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", topic, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockBrokerMockRecorder) Push(topic, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBroker)(nil).Push), topic, message)
}

// MockKeyRepo is a mock of KeyRepo interface.
type MockKeyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRepoMockRecorder
}

// MockKeyRepoMockRecorder is the mock recorder for MockKeyRepo.
type MockKeyRepoMockRecorder struct {
	mock *MockKeyRepo
}

// NewMockKeyRepo creates a new mock instance.
func NewMockKeyRepo(ctrl *gomock.Controller) *MockKeyRepo {
	mock := &MockKeyRepo{ctrl: ctrl}
	mock.recorder = &MockKeyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRepo) EXPECT() *MockKeyRepoMockRecorder {
	return m.recorder
}

// CreateNewKey mocks base method.
func (m *MockKeyRepo) CreateNewKey(ctx context.Context, key *domain.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewKey indicates an expected call of CreateNewKey.
func (mr *MockKeyRepoMockRecorder) CreateNewKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewKey", reflect.TypeOf((*MockKeyRepo)(nil).CreateNewKey), ctx, key)
}

// GetFreeKey mocks base method.
func (m *MockKeyRepo) GetFreeKey(ctx context.Context) (*domain.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeKey", ctx)
	ret0, _ := ret[0].(*domain.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeKey indicates an expected call of GetFreeKey.
func (mr *MockKeyRepoMockRecorder) GetFreeKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeKey", reflect.TypeOf((*MockKeyRepo)(nil).GetFreeKey), ctx)
}

// GetNextKeyFromSequence mocks base method.
func (m *MockKeyRepo) GetNextKeyFromSequence(ctx context.Context) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextKeyFromSequence", ctx)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextKeyFromSequence indicates an expected call of GetNextKeyFromSequence.
func (mr *MockKeyRepoMockRecorder) GetNextKeyFromSequence(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextKeyFromSequence", reflect.TypeOf((*MockKeyRepo)(nil).GetNextKeyFromSequence), ctx)
}

// UpdateKey mocks base method.
func (m *MockKeyRepo) UpdateKey(ctx context.Context, key *domain.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKey", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKey indicates an expected call of UpdateKey.
func (mr *MockKeyRepoMockRecorder) UpdateKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKey", reflect.TypeOf((*MockKeyRepo)(nil).UpdateKey), ctx, key)
}
